1: Package Overview

	1.1: Release Information

	1.2: Utility List	
		Viguar.Structs
			Viguar.Structs.RangeFloat

		Viguar.EditorTooling
			Viguar.EditorTooling.DataContainers.Curve
			Viguar.EditorTooling.InspectorUITools.InspectorButton
			Viguar.EditorTooling.InspectorUITools.ConditionalPropertyDisplay
			Viguar.EditorTooling.InspectorUITools.OverrideLabels
			Viguar.EditorTooling.Utility.CameraRendering

		Viguar.RuntimeTooling
			Viguar.RuntimeTooling.Controllers.Singleplayer.FPSBase
			Viguar.RuntimeTooling.Environment.Wire
			Viguar.RuntimeTooling.PathCreator

2: Tooling Documentation

	2.1: Structs

	|Range Float Struct			
		|Overview
		RangeFloat and its extensions provide an easy way to work with numerical ranges, offering methods for checking containment, interpolations and other intersecting ranges.
		The constructor takes two floating point fields ("min" and "max") to initialize the range. If the minimum value is larger than the maximum value,
		the constructor will automatically swap the values to ensure "min" always being the smaller value.
		
		|Declaration 
			|Syntax: RangeFloat(float min, float max)
				Example: public RangeFloat m_rangeFloat = new RangeFloat(5.0f, 10.0f);
			
		|Properties 
			|range: Calculates and returns the difference between "max" and "min".
				Example: float rangeSize = m_rangeFloat.range; //5.0f

			|middle: Calculates and returns the midpoint of the range.
				Example: float midPoint = m_rangeFloat.middle; //7.5f
		
		|Methods
			|Contains(float value): Returns true if a value is within the range [min, max].
				Example: bool containsSeven = m_rangeFloat.Contains(7.0f); //true
						 bool containsEleven = m_rangeFloat.Contains(11.0f); //false

			|Contains(float value, float margin): Returns true if a value is within the margin of a range [min - margin, max + margin]. 
				Example: bool containsWithMargin = m_rangeFloat.Contains(11.0f, 2.0f); //true (11 > 5 - 2, 11 < 10.0 + 2.0)

			|Lerp(float t): Returns a value within the linear interpolation of the range [min, max] based on the parameter t. 
				Example: float lerpValue = m_rangeFloat.Lerp(0.5f); //7.5f

			|InverseLerp(float value): Returns the parameter t such that value is the interpolated value between the range [min, max].
				Example: float inverseLerpValue = m_RangeFloat.InverseLerp(7.5f); //0.5f

		|Extension Methods
			|Inflated(float value): Returns a RangeFloat that extends its range by the given value on both sides equally.
				Example: RangeFloat m_inflatedRange = m_rangeFloat.Inflated(2.0f); //m_inflatedRange is min=3.0f and max=12.0f

			|Inflated(float minValue, float maxValue): Returns a RangeFloat that extends its range by the given values on each side individually.
				Example: RangeFloat m_inflatedRange = m_rangeFloat.Inflated(1.0f, 3.0f); //m_inflatedRange is min=4.0f and max=13.0f.

			|Intersects(RangeFloat b): Checks if two ranges overlap or intersect.
				Example: RangeFloat range1 = new RangeFloat(5.0f, 10.0f);
						 RangeFloat range2 = new RangeFloat(8.0f, 12.0f);
						 bool intersects = range1.Intersects(range2); //true

			|Intersects(RangeFloat b, float margin): Checks if two ranges with an additional margin overlap with each other.
				Example: RangeFloat range1 = new RangeFloat(5.0f, 10.0f);
						 RangeFloat range2 = new RangeFloat(12.0f, 15.0f); 
						 bool intersects = range1.Intersects(range2, 3.0f); //true


	2.2: Editor Tooling

	|Curve Data Container
		|Overview
		CurveContainer allows for storing Unity's AnimationCurve as an asset in the project. This may be particularely helpful when creating vehicles 
		or other non-linear behavior requiring AnimationCurve.Evaluate().

		|Creation
		A curve container can be created by right-clicking in Project>Viguar>DataContainers>CurveContainer. This creates an empty Curve Container asset. 

		|Fields
			|Curve: The AnimationCurve. By default it is a linear AnimationCurve(0, 0, 1, 1).
			|CurveName: Non-accessible string to assign a name to the curve.
			|CurveName: Non-accessible text area to store details or notes about the curve.

		|Scripting			
			|Directive:		using Viguar.EditorTooling.DataContainers.Curve;
			|Declaration:	public CurveContainer m_container;			
			Once declared, the CurveContainer asset can be accessed like an AnimationCurve.


	2.3: Runtime Tooling