using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using Viguar.WeatherDynamics;

namespace Viguar.Aircraft
{
    [RequireComponent(typeof(Rigidbody))]
    [RequireComponent(typeof(AircraftConfiguration))]
    [RequireComponent(typeof(AircraftTrackingProcessor))]
    [RequireComponent(typeof(AircraftStateProcessor))]
    [RequireComponent(typeof(AircraftControlInputProcessor))]
    [RequireComponent(typeof(AircraftLandingGearProcessor))]
    public class AircraftBaseProcessor : MonoBehaviour
    {
        private AircraftConfiguration _configData;
        private AircraftStateProcessor _aircraftStateProcessor;
        private AircraftTrackingProcessor _aircraftTrackingProcessor;
        private AircraftAerodynamicsProcessor _aircraftAerodynamicsProcessor;
        private AircraftLandingGearProcessor _aircraftLandingGearProcessor;

        #region Configuration Partitions
        private bool _AerodynamicConfig = false; //Configures aerodynamic settings if true.
        private bool _ControlSurfaceConfig = false; //Configures control surface settings if true.
        private bool _EngineConfig = false; //Configures engine settings if true.
        private bool _FuelConfig = false; //Configures fuel settings if true.
        private bool _LandingGearConfig = false; //Configures landing gear settings if true.
        private bool _EnvironmentConfig = false; //Configures environmental effect settings if true.
        private bool _AutoFlightConfig = false; //Configures autoflight settings if true.
        private bool _AnimConfig = false; //Configures animation settings if true.
        #endregion
        #region Configurable Values
        #region Configurable Values: Aerodynamics
        public float _YSeaLevel { get; set; } //The global sea level reference in world space y.
        public float _MaximumFlightAltitude { get; set; } //The altitude at which there is no more lift generated by the aeroplane.
        public float _MaximumLiftSpeed { get; set; } //The speed at which maximum lift can be generated.
        public float _AerodynamicEffect { get; set; } //
        public float _Lift { get; set; } //The strength of lift the aeroplane creates.
        public float _DragOverSpeed { get; set; } //The rate of drag over airspeed of the aeroplane.
        public bool _CustomCOM { get; set; } //Overrides the precalculated center of mass of the aeroplane if true.
        public Transform _CustomCenterOfMass { get; set; } //The override position of the center of mass of the aeroplane.
        public AnimationCurve _LiftSpeedFactorCurve { get; set; } //The amount of lift (y) created relative to the aeroplanes airspeed (x).
        #endregion
        #region Configurable Values: Control Surfaces
        public bool _AutomaticallyTrimStabilisers { get; set; }
        public bool _HasElevator { get; set; }
        public bool _HasRudder { get; set; }
        public bool _HasAilerons { get; set; }
        public bool _HasAirbrakes { get; set; }
        public bool _HasFlaps { get; set; }
        public float _ElevatorResponse { get; set; }
        public float _RudderResponse { get; set; }
        public float _AileronResponse { get; set; }
        public float _BankingTurnResponse { get; set; }
        public float _AirbrakeResponse { get; set; }
        public float _FlapResponse { get; set; }
        public int[] _FlapSteps { get; set; }
        public AnimationCurve _FlapLiftOverSpeed { get; set; }
        public AnimationCurve _FlapDragOverSpeed { get; set; }
        #endregion
        #region Configurable Values: Engines        
        public bool _HasEngines { get; set; }
        public ConfigEngines._cEngineConfiguration _EngineLayout { get; set; }
        public ConfigEngines._cPropulsionType _PropulsionType { get; set; }
        public float _MaxEngineThrust { get; set; }
        public float _MaxTogaThrust { get; set; }
        public AnimationCurve _EngineSpoolRate { get; set; }
        public Transform _SingleEnginePosition { get; set; }
        public _configVarMultiEngineProperty[] _EngineProperties { get; set; }
        #endregion
        #region Configurable Values: Fuel        
        public bool _EnginesUseFuel { get; set; }
        public float _MaximumFuelCapacity { get; set; }
        public AnimationCurve _FuelConsumptionAtThrust { get; set; }
        #endregion
        #region Configurable Values: Landing Gear
        public ConfigLandingGear._cLandingGearTypes _LandingGearType { get; set; }
        public bool _LandingGearInducesDrag { get; set; }
        public float _LandingGearDrag { get;  set; }
        public float _LandingGearWheelBrakeResponse { get; set; }
        public float _LandingGearWheelMaxSteeringAngle { get; set; }
        public GameObject _LandingGearSteeringColumn { get; set; }
        public float _WheelBrakeTemperatureIncreasePerSecond { get; set; }
        #endregion
        #region Configurable Values: Environment
        public bool _EnvironmentAffectsAerodynamics { get; set; }
        public bool _EnvironmentAtmosphereAffectsAerodynamics { get; set; }
        public bool _EnvironmentPrecipitationAffectsAerodynamics { get; set; }
        public bool _EnvironmentWindAffectsAerodynamics { get; set; }
        public float _AirtemperatureAltitudeFalloff { get;  set; }
        public float _RelativeHumidityAltitudeFalloff { get; set; }
        public float _WindStrengthAltitudeIncrease { get; set; }
        public float _WindStrengthFactor { get; set; }
        
        public float _FallbackSeaLevelAirTemperature { get; set; }
        public float _FallbackSeaLevelAirpressure { get; set; }
        public float _FallbackSeaLevelRelativeHumidity { get; set; }
        public float _FallbackSeaLevelWindStrength { get; set; }
        
        public AnimationCurve _AltitudeResponse { get; set; }
        public AnimationCurve _AirTemperatureResponse { get; set; }
        public AnimationCurve _AirDensityResponse { get; set; }
        #endregion
        #region Configurable Values: Starting Configuration
        public bool _StartWithEngineRunning { get; set; }
        public bool _StartWithCustomFuelAmount { get; set; }
        public bool _StartAtCustomPosition { get; set; }
        public bool _StartWithVelocity { get; set; }
        public bool _StartWithLandingGear { get; set; }
        #endregion
        #endregion
        #region Configurable Constraints & Detection Values
        #region Configurable Constraints: Flight Stability
        public float _CriticalWarningPercentage { get; set; }
        public float _MaxStablePitchAngle { get; set; }
        public float _MaxStableRollAngle { get; set; }
        public Vector2 _MinMaxStableForwardSpeed { get; set; }
        public float _MaxStableVerticalSpeed { get; set; }
        public float _MinStableAltitude { get; set; }
        #endregion
        #region Configurable Constraints: Flight State Detection Values
        public float _StallMargin { get; set; }
        public Vector2 _StateStationaryDetectionSpeedRegime { get; set; }
        public Vector2 _StateTakeoffDetectionSpeedRegime { get; set; }
        public Vector2 _StateLandingDetectionSpeedRegime { get; set; }
        public Vector2 _StateLandingDetectionVerticalSpeedRegime { get; set; }
        public float _StateLandingDetectionMaxAltitude { get; set; }
        #endregion
        #region Configurable Constraints: Flight Situation Arrays
        public ConfigConstraintsAttitudeStabilityCategories[] _AttitudeStabilityProperties { get; set; }
        public ConfigConstraintsSpeedStabilityCategories[] _SpeedStabilityProperties { get; set; }
        public ConfigConstraintsLandingCategories[] _LandingStabilityProperties { get; set; }
        #endregion
        #region Configurable Constraints: Flight Automatics
        public float _APVerticalSpeedLimit { get; set; }
        public Vector2 _APPitchAngleLimits { get; set; }
        public Vector2 _APRollAngleLimits { get; set; }
        public Vector2 _ATForwardSpeedLimits { get; set; }
        #endregion
        #endregion
        #region Runtime Values
        #region Runtime Values: Start Values
        public float _DragStart { get; set; }
        public float _AngularDragStart { get; set; }
        public float _LandingGearDragStart { get; set; }
        #endregion
        #region Runtime Values: Position, Orientation & Velocities
        public float _PitchAngle { get; set; }
        public float _RollAngle { get; set; }
        public float _YawAngle { get; set; }
        public float _PitchDegreeAngle { get; set; }
        public float _BankDegreeAngle { get; set; }
        public float _AltitudeSeaLevel { get; set; }
        public float _AltitudeRaycast { get; set; }
        public float _AltitudeRelative { get; set; }
        public float _Heading { get; set; }
        public float _ForwardSpeed { get; set; }
        public float _VerticalSpeed { get; set; }
        public float _ForwardSpeedRateOfChange { get; set; }
        #endregion
        #region Runtime Values: Flight States
        public bool _StateCrashed { get; set; }
        public bool _StateFlying { get; set; }
        public bool _StateStalled { get; set; }
        public bool _StateLanding { get; set; }
        public bool _StateTakeoff { get; set; }
        public bool _StateGrounded { get; set; }
        public bool _StateStationary { get; set; }
        public bool _StateParked { get; set; }        
        #endregion
        #region Runtime Values: Aerodynamic Values
        public Vector3 _LiftDirection { get; set; }
        public Vector3 _Forces { get; set; }
        public float _LiftStrength { get; set; }
        public float _LiftPotential { get; set; }       
        public float _Drag { get; set; }
        public float _AngularDrag { get; set; }
        public float _DragPotential { get; set; }
        public float _FcgDirDifFactor { get; set; }
        public float _StallLoad { get; set; }
        public Vector3 _Torque { get; set; }
        public float _TorquePotential { get; set; }
        #endregion
        #region Runtime Values: Control Surfaces           
        public float _InputSurfaceDelay { get; set; }
        public float _StabiliserTrimAmount { get; set; }
        public float _CurrentSetElevatorAmount { get; set; }
        public float _CurrentSetAileronAmount { get; set; }
        public float _CurrentSetRudderAmount { get; set; }
        public float _CurrentAirbrakeAmount { get; set; }
        public int _CurrentFlapSetting { get; set; }
        public float _CurrentFlapDegreeSetting { get; set; }
        public float _FlapLift { get; set; }
        public float _FlapDrag { get; set; }
        #endregion
        #region Runtime Values: Engines        
        public bool _MasterEnginesOn { get; set; }
        public bool _TogaMode { get; set; }
        public int _TotalEngineCount { get; set; }
        public float _MaximumTotalThrust { get; set; }
        public float _MaximumTotalTogaThrust { get; set; }
        public float _RequestedTotalThrust { get; set; }
        public float _CurrentTotalThrust { get; set; }
        public float _ThrustPotential { get; set; }
        #endregion
        #region Runtime Values: Fuel
        public float _CurrentFuelAmount { get; set; }
        public float _CurrentFuelAmountPercentage { get; set; }
        public bool _FuelTankDepleted { get; set; }
        public bool _FuelTankFull { get; set; }
        #endregion
        #region Runtime Values: Landing Gear
        public bool _LandingGearInitiated { get; set; }
        public bool _LandingGearExtended { get; set; }
        public WheelCollider[] _LandingGearWheels { get; set; }
        public int _LandingGearWheelsAmount { get; set; }
        public int _LandingGearWheelsAmountGrounded { get; set; }
        public float _LandingGearSteeringAngle { get; set; }
        public float _LandingGearHydraulicsPressure { get; set; }
        public float _LandingGearWheelBrakeTemperature { get; set; }
        public float _LandingGearWheelBrakeFluidPressure { get; set; }
        public float _LandingGearTireStress { get; set; }
        #endregion
        #region Runtime Values: Environment
        public weatherController _GlobalWeatherController { get; set; }
        public weatherZone _CurrentWeatherZone { get; set; }
        public weatherWindZone _CurrentWeatherZoneWind { get; set; }
        public bool _AircraftInsideWeatherZone { get; set; }
        public bool _AircraftInsideCloud { get; set; }
        public bool _AircraftInsidePrecipitationArea { get; set; }
        public float _CurrentSeaLevelAirTemperature { get; set; }
        public float _CurrentSeaLevelAirPressure { get; set; }
        public float _CurrentSeaLevelAirDensity { get; set; }
        public float _CurrentSeaLevelRelativeHumidity { get; set; }
        public float _CurrentSeaLevelWindStrength { get; set; }
        public float _AltitudeAirTemperature { get; set; }
        public float _AltitudeAirPressure { get; set; }
        public float _AltitudeAirDensity { get; set; }
        public float _AltitudeRelativeHumidity { get; set; }
        public float _AltitudeWindStrength { get; set; }                
        public float _AltitudeResponseEfficiency { get; set; }
        public float _AirTemperatureResponseEfficiency { get; set; }
        public float _AirDensityResponseEfficiency { get; set; }
        public float _WindLiftPotential { get; set; }
        public float _CurrentWindHeading { get; set; }
        public float _CurrentWindSpeed { get; set; }
        #endregion
        #region Runtime Values: Flight Automatics
        public bool _APOnline { get; set; }
        public bool _ATOnline { get; set; }
        public bool _ALOnline { get; set; }
        public enum _APModes { APModeCommand, APModeAltitudeAssist, APModePitchAssist, APModeHeadingAssist, APModeDisengaged, APOff }
        public enum _ATModes { ATModeCommand, ATModeSpeed, ATModeThrust, ATModeDisengaged, ATOff }
        public enum _ALModes { ALModeCommand, ALModeCompensate, ALModeDisengaged, ALOff}
        [HideInInspector]public _APModes _APMode;
        [HideInInspector]public _ATModes _ATMode;
        [HideInInspector]public _ALModes _ALMode;
        public float _APTargetHeading { get; set; }
        public float _APTargetAltitude { get; set; }
        public float _APTargetVerticalSpeed { get; set; }
        public float _APTargetPitchAngle { get; set; }
        public float _ATTargetSpeed { get; set; }
        public float _ATTargetThrustPercentage { get; set; }
        public float _ATTargetThrust { get; set; }
        public Vector3 _ATTargetVelocity { get; set; }
        public Vector3 _ATTargetForce { get; set; }
        public Vector3 _APTargetVerticalVelocity { get; set; }
        public float _ATTargetThrottlePosition { get; set; }
        public float _APTargetYokePitchPosition { get; set; }
        #endregion
        #region Runtime Values: States, Warnings & Alerts Enums
        public enum CWPCStateTypes { Clear, Warning, } //Master Caution Panel
        public enum CWPWStateTypes { Clear, Warning, } //Master Alert Panel
    
        public enum RollAngleStateTypes { Stable, Critical, Upset, }
        public enum PitchAngleStateTypes { Stable, Critical, Upset, }
        public enum SpeedStateTypes { Stable, Critical, Upset, }
        public enum VerticalSpeedStateTypes { Stable, Critical, Upset, }
        public enum StallStateTypes { Stable, Critical, Upset, }
        public enum AltitudeStateTypes { Stable, Critical, Upset, }
        public enum EngineStateTypes { Stable, Critical, Upset, }
        public enum FuelStateTypes { Stable, Critical, Upset, }
        public enum LandingGearStateTypes { Extended, Retracted, Processing, Fail, } 
        public enum WheelBrakeStateTypes { Normal, Hot, Overheating, Fail, }
        public enum WheelTireStateTypes { Normal, CriticalPressure, Blowout, }
        public enum ElectricityStateTypes { Stable, }
        public enum BatteryStateTypes { Stable, LowCharge, Empty, }

        [HideInInspector] public CWPCStateTypes _CWPMasterCautionState; //Master Caution Panel
        [HideInInspector] public CWPWStateTypes _CWPMasterWarningState; //Master Alert Panel
        [HideInInspector] public RollAngleStateTypes _RollAngleState;
        [HideInInspector] public PitchAngleStateTypes _PitchAngleState;
        [HideInInspector] public SpeedStateTypes _SpeedState;
        [HideInInspector] public VerticalSpeedStateTypes _VerticalSpeedState;
        [HideInInspector] public StallStateTypes _StallState;
        [HideInInspector] public AltitudeStateTypes _AltitudeState;
        [HideInInspector] public LandingGearStateTypes _LandingGearState;
        [HideInInspector] public WheelBrakeStateTypes _WheelBrakeState;
        [HideInInspector] public WheelTireStateTypes _WheelTireState;
        [HideInInspector] public ElectricityStateTypes _ElectricityState;
        [HideInInspector] public BatteryStateTypes _BatteryState;

        #endregion
        #endregion
        #region User & Virtual Input            
        public bool _HasSurfaceInputDelay { get; set; }
        public float _HIDThrottleInput { get; set; }
        public float _HIDPitchInput { get; set; }
        public float _HIDYawInput { get; set; }
        public float _HIDRollInput { get; set; }
        public float _HIDAirbrakeInput { get; set; }
        public float _HIDWheelbrakeInput { get; set; }
        public bool _HIDFlapsInput { get; set; }
        public bool _HIDLandingGearInput { get; set; }
        public bool _HIDTogaInput { get; set; }

        public float _ATThrottleInput { get; set; }
        public bool _ATTogaInput { get; set; }

        public float _APPitchInput { get; set; }
        public float _APYawInput { get; set; }
        public float _APRollInput { get; set; }
        public float _APAirbrakeInput { get; set; }

        public float _LeverThrottleSetting { get; set; }
        public float _YokePitchSetting { get; set; }
        public float _YokeRollSetting { get; set; }
        public float _PedalRudderSetting { get; set; }
        public float _LeverAirbrakeSetting { get; set; }
        public float _PedalWheelbrakeSetting { get; set; }
        public bool _LeverFlapsSetting { get; set; }
        public bool _SwitchLandingGearSetting { get; set; }
        public bool _SwitchTogaSetting { get; set; }

        public bool _DetectedThrottleInput { get; set; }
        public bool _DetectedPitchInput { get; set; }
        public bool _DetectedRollInput { get; set; }
        public bool _DetectedYawInput { get; set; }

        public float _OverridePitchInput { get; set; }
        public float _OverrideYawInput { get; set; }
        public float _OverrideRollInput { get; set; }
        public float _OverrideAirbrakeInput { get; set; }
        public bool _OverrideFlapsInput { get; set; }
        public bool _OverrideLandingGearInput { get; set; }
        public float _OverrideThrottleInput { get; set; }

        public bool _DebugCursortoggleInput { get; set; }
        public bool _DebugCursorclickInput { get; set; }
        public bool _DebugShutterInput { get; set; }
        #endregion
        #region Debug Variables
        public bool _DebugPanelActive { get; set; }
        public bool _DebugCursorActive { get; set; }        
        public Camera _DebugActiveCamera { get; set; }
        #endregion

        #region Animations
        //Animations
        public bool _AnimateControlSurfaces { get; set; }        
        public bool _AnimateLandingGear { get; set; }
        public bool _AnimateAvionics { get; set; }
        public ConfigControlSurfaceAnimations _CSA { get; set; }
        public ConfigAvionics _CAA { get; set; }
        #endregion
        #region Dictionaries
        public Dictionary<string, bool> StartingStateDict = new Dictionary<string, bool>();
        public Dictionary<string, float> TrackingDict = new Dictionary<string, float>();
        public Dictionary<string, bool> FlightStateDict = new Dictionary<string, bool>();

        public Dictionary<string, float> VirtualCtrlDict = new Dictionary<string, float>();
        public Dictionary<string, bool> ControlTriggersDict = new Dictionary<string, bool>();
        public Dictionary<string, float> ControlSurfaceDict = new Dictionary<string, float>();
        public Dictionary<string, float> EnvironmentDict = new Dictionary<string, float>();

        public Dictionary<string, float> AvionicsDict = new Dictionary<string, float>();
        public Dictionary<string, bool> CautionsDict = new Dictionary<string, bool>();

        public Dictionary<string, float> MotionForcesDict = new Dictionary<string, float>();
        public Dictionary<string, Vector3> VectorForcesDict = new Dictionary<string, Vector3>();
        public Dictionary<string, float> DetectedPropertiesDict = new Dictionary<string, float>();

        public Dictionary<string, float> DebugFloatDict = new Dictionary<string, float>();
        public Dictionary<string, bool> DebugBoolDict = new Dictionary<string, bool>();
        public Dictionary<string, Vector3> DebugVectorDict = new Dictionary<string, Vector3>();
        public Dictionary<string, string> DebugStringDict = new Dictionary<string, string>();
        #endregion

        #region Configuration Methods
        private void Start()
        {
            _configData = GetComponent<AircraftConfiguration>();
            _aircraftStateProcessor = GetComponent<AircraftStateProcessor>();
            _aircraftTrackingProcessor = GetComponent<AircraftTrackingProcessor>();
            _aircraftLandingGearProcessor = GetComponent<AircraftLandingGearProcessor>();
            _aircraftLandingGearProcessor.enabled = false;
        }
        private void Update()
        {
            _aircraftStateProcessor.EvaluateAircraftStates();
            _aircraftTrackingProcessor.PerformAircraftTrackingCalculations();           
        }
        #region Configuration Processing
        public void ProcessStartConfiguation(bool engine, bool fuel, float fuelAm, bool pos, Transform posAm, bool vel, Vector3 velAm, bool gear)
        {
            _StartWithEngineRunning = engine;
            _StartWithCustomFuelAmount = fuel;
            _StartAtCustomPosition = pos;
            _StartWithVelocity = vel;
            _StartWithLandingGear = gear;
            StartingStateDict["Start Engine On"] = _StartWithEngineRunning;
            StartingStateDict["Start Fuel"] = _StartWithCustomFuelAmount;
            StartingStateDict["Start Position"] = _StartAtCustomPosition;
            StartingStateDict["Start Velocity"] = _StartWithVelocity;
            StartingStateDict["Start Landing Gear"] = _StartWithLandingGear;

            if (_StartWithCustomFuelAmount) { _CurrentFuelAmount = fuelAm; }
            if (_StartAtCustomPosition) { gameObject.transform.position = posAm.transform.position; }
            if (_StartWithVelocity) { GetComponent<Rigidbody>().velocity = velAm; }
            //GetComponent<AircraftEnginesProcessorMultiEngine>().MasterSetMultiEngine(_StartWithEngineRunning);
        }
        public void ProcessAerodynamicConfiguration(float ySeaLevel, float maxAltitude, float maxLiftSpeed, float aerodynamicEffect, float lift, float dragOverSpeed, bool customcom, Transform customcompos, AnimationCurve liftSpeedFactor)
        {
            _YSeaLevel = ySeaLevel;
            _MaximumFlightAltitude = maxAltitude;
            _MaximumFlightAltitude += _YSeaLevel;
            _MaximumLiftSpeed = maxLiftSpeed;
            _AerodynamicEffect = aerodynamicEffect;
            _Lift = lift;
            _DragOverSpeed = dragOverSpeed;            
            _AerodynamicConfig = true;
            _CustomCOM = customcom;
            _CustomCenterOfMass = customcompos;
            _LiftSpeedFactorCurve = liftSpeedFactor;
            gameObject.AddComponent(typeof(AircraftAerodynamicsProcessor));
        }
        public void ProcessControlSurfaceConfiguration(bool hasElevator, float elevator, bool hasRudder, float rudder, bool hasAilerons, float ailerons, float rollTurn, bool hasAirbrakes, float airbrakes, bool hasFlaps, float flaps, int[] flapSteps, AnimationCurve liftOverSpeed, AnimationCurve dragOverSpeed)
        {
            _HasElevator = hasElevator;
            _HasRudder = hasRudder;
            _HasAilerons = hasAilerons;
            _HasAirbrakes = hasAirbrakes;
            _HasFlaps = hasFlaps;
            _ElevatorResponse = (_HasElevator ? elevator : 0f);
            _RudderResponse = (_HasRudder ? rudder : 0f);
            _AileronResponse = (_HasAilerons ? ailerons : 0f);
            _BankingTurnResponse = (_HasAilerons ? rollTurn : 0f);
            _AirbrakeResponse = (_HasAirbrakes ? airbrakes : 0f);
            _FlapResponse = (_HasFlaps ? flaps : 0f);
            _FlapSteps = (_HasFlaps ? flapSteps : null);
            _FlapLiftOverSpeed = liftOverSpeed;
            _FlapDragOverSpeed = dragOverSpeed;
            _ControlSurfaceConfig = true;
            gameObject.AddComponent(typeof(AircraftControlSurfacesProcessor));
        }
        public void ProcessSingleEngineConfiguration(ConfigEngines._cEngineConfiguration engineLayout, ConfigEngines._cPropulsionType propulsionType, float maxThrust, float maxToga, AnimationCurve spoolRate, Transform singleEnginePos)
        {
            
            _EngineLayout = engineLayout;
            _PropulsionType = propulsionType;
            _MaxEngineThrust = maxThrust;
            _MaxTogaThrust = maxToga;
            _EngineSpoolRate = spoolRate;
            _SingleEnginePosition = singleEnginePos;
            _EngineConfig = true;
            if (_EngineLayout == ConfigEngines._cEngineConfiguration.SingleEngine) { gameObject.AddComponent(typeof(AircraftEnginesProcessorSingleEngine)); }
            
        }
        public void ProcessMultiEngineConfiguration(ConfigEngines._cEngineConfiguration engineLayout, ConfigEngines._cPropulsionType propulsionType, float maxThrust, float maxToga, AnimationCurve spoolRate, _configVarMultiEngineProperty[] engineProperties)
        {
            if (_StartWithEngineRunning) { _MasterEnginesOn = true; }
            _EngineLayout = engineLayout;
            _PropulsionType = propulsionType;
            _MaxEngineThrust = maxThrust;
            _MaxTogaThrust = maxToga;
            _EngineSpoolRate = spoolRate;
            _EngineProperties = engineProperties;
            _EngineConfig = true;
            if (_EngineLayout == ConfigEngines._cEngineConfiguration.MultiEngine) { gameObject.AddComponent(typeof(AircraftEnginesProcessorMultiEngine)); }
            
        }        
        public void ProcessFuelConfiguration(bool burnFuel, float maxCapacity, AnimationCurve fuelThrustRate)
        {
            _EnginesUseFuel = burnFuel;
            _MaximumFuelCapacity = maxCapacity;
            _FuelConsumptionAtThrust = fuelThrustRate;
            _FuelConfig = true;
            gameObject.AddComponent(typeof(AircraftFuelProcessor));
        }
        public void ProcessLandingGearConfiguration(ConfigLandingGear._cLandingGearTypes gearType, float gearDrag, float wheelBrake, float wheelSteerMax, GameObject steeringColumn, float brakeTempIncrease)
        {
            _LandingGearType = gearType;            
            _LandingGearDrag = gearDrag;
            _LandingGearWheelBrakeResponse = wheelBrake;
            _LandingGearWheelMaxSteeringAngle = wheelSteerMax;
            _LandingGearSteeringColumn = steeringColumn;
            _WheelBrakeTemperatureIncreasePerSecond = brakeTempIncrease;
            _LandingGearConfig = true;
            _aircraftLandingGearProcessor.enabled = true;                      
        }
        public void ProcessEnvironmentConfiguration(bool envEffect, bool atmEffect, bool wndEffect, bool prpEffect, float tempFalloff, float humFalloff, float windIncrease, float windFacor, AnimationCurve altEff, AnimationCurve tempEff, AnimationCurve densEff)
        {
            _EnvironmentAffectsAerodynamics = envEffect;
            _EnvironmentAtmosphereAffectsAerodynamics = atmEffect;
            _EnvironmentWindAffectsAerodynamics = wndEffect;
            _EnvironmentPrecipitationAffectsAerodynamics = prpEffect;
            _AirtemperatureAltitudeFalloff = tempFalloff;
            _RelativeHumidityAltitudeFalloff = humFalloff;
            _WindStrengthAltitudeIncrease = windIncrease;
            _WindStrengthFactor = windFacor;
            _AltitudeResponse = altEff;
            _AirTemperatureResponse = tempEff;
            _AirDensityResponse = densEff;
            _EnvironmentConfig = true;
            gameObject.AddComponent(typeof(AircraftEnvironmentProcessor));
        }
        public void ProcessEnvironmentFallbackConfiguration(float slTemp, float slPress, float slHum, float slWind)
        {
            _FallbackSeaLevelAirTemperature = slTemp;
            _FallbackSeaLevelAirpressure = slPress;
            _FallbackSeaLevelRelativeHumidity = slHum;
            _FallbackSeaLevelWindStrength = slWind;
        }
        public void ProcessAutomaticsConfiguration()
        {
            _AutoFlightConfig = true;
            gameObject.AddComponent(typeof(AircraftAutoFlightProcessor));
        }

        public void ProcessConstraintsConfiguration(float criticalPercentage, float maxStablePitch, float maxStableRoll, Vector2 maxStableSpeed, float maxStableVerticalSpeed, float minStableAlt)
        {
            _CriticalWarningPercentage = criticalPercentage;
            _MaxStablePitchAngle = maxStablePitch;
            _MaxStableRollAngle = maxStableRoll;
            _MinMaxStableForwardSpeed = maxStableSpeed;
            _MaxStableVerticalSpeed = maxStableVerticalSpeed;
            _MinStableAltitude = minStableAlt;
        }
        public void ProcessConstraintsFlightStatesConfiguration(float stallMargin, Vector2 stationaryVRange, Vector2 takeoffVRange, Vector2 landVRange, Vector2 landVRangeV, float landAlti)
        {
            _StallMargin = stallMargin;
            _StateStationaryDetectionSpeedRegime = stationaryVRange;
            _StateTakeoffDetectionSpeedRegime = takeoffVRange;
            _StateLandingDetectionSpeedRegime = landVRange;
            _StateLandingDetectionVerticalSpeedRegime = landVRangeV;
            _StateLandingDetectionMaxAltitude = landAlti;
        }
        public void ProcessConstraintsFlightStateCategoriesConfiguration(ConfigConstraintsLandingCategories[] landingCat, ConfigConstraintsAttitudeStabilityCategories[] attitudeCat, ConfigConstraintsSpeedStabilityCategories[] speedCat)
        {
            _LandingStabilityProperties = landingCat;
            _AttitudeStabilityProperties = attitudeCat;
            _SpeedStabilityProperties = speedCat;
        }
        public void ProcessConstraintsAutomatics(float maxVSpeed, Vector2 minMaxPitch, Vector2 minMaxRoll, Vector2 minMaxSpeed)
        {
            _APVerticalSpeedLimit = maxVSpeed;
            _APPitchAngleLimits = minMaxPitch;
            _APRollAngleLimits = minMaxRoll;
            _ATForwardSpeedLimits = minMaxSpeed;
        }

        public void ProcessAnimationConfiguration(bool animateControlSurfaces, bool animateAvionics, ConfigControlSurfaceAnimations csa, ConfigAvionics caa)
        {
            _AnimateControlSurfaces = animateControlSurfaces;
            _AnimateAvionics = animateAvionics;
            _CSA = csa;
            _CAA = caa;
            _AnimConfig = true;
            gameObject.AddComponent(typeof(AircraftAnimationProcessor));
        }
        #endregion
        #endregion
        #region Dictionary Methods
        public void DefineControlTriggersDictionary()
        {
            ControlTriggersDict["Landing Gear"] = _LandingGearInitiated;
            ControlTriggersDict["Flaps"] = _LeverFlapsSetting;
            ControlTriggersDict["Toga"] = _SwitchTogaSetting;
        }
        public void DefineControlSurfaceDictionary()
        {
            ControlSurfaceDict["Elevators"] = _CurrentSetElevatorAmount;
            ControlSurfaceDict["Rudders"] = _CurrentSetRudderAmount;
            ControlSurfaceDict["Ailerons"] = _CurrentSetAileronAmount;
            ControlSurfaceDict["Flaps"] = _CurrentFlapSetting;
            ControlSurfaceDict["Airbrakes"] = _CurrentAirbrakeAmount;
            ControlSurfaceDict["Steering Angle"] = _LandingGearSteeringAngle;
            ControlSurfaceDict["Response Altitude"] = _AltitudeResponseEfficiency;
            ControlSurfaceDict["Response Airtemperature"] = _AirTemperatureResponseEfficiency;
            ControlSurfaceDict["Response Airdensity"] = _AirDensityResponseEfficiency;
            ControlSurfaceDict["Yoke Pitch"] = _YokePitchSetting;
            ControlSurfaceDict["Yoke Roll"] = _YokeRollSetting;
        }
        public void DefineAvionicsDictionary()
        {
            AvionicsDict["Altimeter"] = _AltitudeSeaLevel;
            AvionicsDict["Airspeed Indicator"] = _ForwardSpeed;
            AvionicsDict["Variometer"] = _VerticalSpeed;
            AvionicsDict["Compass"] = _Heading;
            AvionicsDict["Barometer"] = _AltitudeAirPressure;
            AvionicsDict["Thermometer"] = _AltitudeAirTemperature;

            AvionicsDict["Flaps Indicator"] = _CurrentFlapDegreeSetting;

            AvionicsDict["BrakeTemperature"] = _LandingGearWheelBrakeTemperature;
        }        
        public void DefineDebugDictionaryFloat()
        {
            //Transform Info
            DebugFloatDict["_PitchAngle"] = _PitchAngle;
            DebugFloatDict["_RollAngle"] = _RollAngle;
            DebugFloatDict["_YawAngle"] = _YawAngle;
            DebugFloatDict["_PitchDegreeAngle"] = _PitchDegreeAngle;
            DebugFloatDict["_BankDegreeAngle"] = _BankDegreeAngle;
            DebugFloatDict["_AltitudeSeaLevel"] = _AltitudeSeaLevel;
            DebugFloatDict["_AltitudeRelative"] = _AltitudeRelative;
            DebugFloatDict["_AltitudeRaycast"] = _AltitudeRaycast;
            DebugFloatDict["_Heading"] = _Heading;
            DebugFloatDict["_ForwardSpeed"] = _ForwardSpeed;
            DebugFloatDict["_VerticalSpeed"] = _VerticalSpeed;
            //Physics Info
            DebugFloatDict["_LiftStrength"] = _LiftStrength;
            DebugFloatDict["_LiftPotential"] = _LiftPotential;
            DebugFloatDict["_Drag"] = _Drag;
            DebugFloatDict["_AngularDrag"] = _AngularDrag;
            DebugFloatDict["_DragPotential"] = _DragPotential;
            DebugFloatDict["_TorquePotential"] = _TorquePotential;
            DebugFloatDict["_FcgDirDifFactor"] = _FcgDirDifFactor;
            DebugFloatDict["_ForwardSpeedRateOfChange"] = _ForwardSpeedRateOfChange;
            //Control Surface Info
            DebugFloatDict["_InputSurfaceDelay"] = _InputSurfaceDelay;
            DebugFloatDict["_StabiliserTrimAmount"] = _StabiliserTrimAmount;
            DebugFloatDict["_CurrentSetElevatorAmount"] = _CurrentSetElevatorAmount;
            DebugFloatDict["_CurrentSetRudderAmount"] = _CurrentSetRudderAmount;
            DebugFloatDict["_CurrentSetAileronAmount"] = _CurrentSetAileronAmount;
            DebugFloatDict["_CurrentAirbrakeAmount"] = _CurrentAirbrakeAmount;
            DebugFloatDict["_CurrentFlapSetting"] = _CurrentFlapSetting;
            DebugFloatDict["_CurrentFlapDegreeSetting"] = _CurrentFlapDegreeSetting;
            DebugFloatDict["_FlapDrag"] = _FlapDrag;
            DebugFloatDict["_FlapLift"] = _FlapLift;
            //Engine & Fuel Info
            DebugFloatDict["_TotalEngineCount"] = _TotalEngineCount;
            DebugFloatDict["_MaximumTotalThrust"] = _MaximumTotalThrust;
            DebugFloatDict["_MaximumTotalTogaThrust"] = _MaximumTotalTogaThrust;
            DebugFloatDict["_RequestedTotalThrust"] = _RequestedTotalThrust;
            DebugFloatDict["_CurrentTotalThrust"] = _CurrentTotalThrust;
            DebugFloatDict["_ThrustPotential"] = _ThrustPotential;
            DebugFloatDict["_CurrentFuelAmount"] = _CurrentFuelAmount;
            DebugFloatDict["_CurrentFuelAmountPercentage"] = _CurrentFuelAmountPercentage;
            //Landing Gear & Wheels
            DebugFloatDict["_LandingGearWheelsAmount"] = _LandingGearWheelsAmount;
            DebugFloatDict["_LandingGearWheelsAmountGrounded"] = _LandingGearWheelsAmountGrounded;
            DebugFloatDict["_LandingGearSteeringAngle"] = _LandingGearSteeringAngle;
            DebugFloatDict["_LandingGearWheelBrakeTemperature"] = _LandingGearWheelBrakeTemperature;
            //Climate & Weather
            DebugFloatDict["_CurrentSeaLevelAirTemperature"] = _CurrentSeaLevelAirTemperature;
            DebugFloatDict["_CurrentSeaLevelAirPressure"] = _CurrentSeaLevelAirPressure;
            DebugFloatDict["_CurrentSeaLevelAirDensity"] = _CurrentSeaLevelAirDensity;
            DebugFloatDict["_CurrentSeaLevelRelativeHumidity"] = _CurrentSeaLevelRelativeHumidity;
            DebugFloatDict["_CurrentSeaLevelWindStrength"] = _CurrentSeaLevelWindStrength;
            DebugFloatDict["_AltitudeAirTemperature"] = _AltitudeAirTemperature;
            DebugFloatDict["_AltitudeAirPressure"] = _AltitudeAirPressure;
            DebugFloatDict["_AltitudeAirDensity"] = _AltitudeAirDensity;
            DebugFloatDict["_AltitudeRelativeHumidity"] = _AltitudeRelativeHumidity;
            DebugFloatDict["_AltitudeWindStrength"] = _AltitudeWindStrength;
            DebugFloatDict["_AltitudeResponseEfficiency"] = _AltitudeResponseEfficiency;
            DebugFloatDict["_AirDensityResponseEfficiency"] = _AirDensityResponseEfficiency;
            DebugFloatDict["_AirTemperatureResponseEfficiency"] = _AirTemperatureResponseEfficiency;
            DebugFloatDict["_WindLiftPotential"] = _WindLiftPotential;
            DebugFloatDict["_CurrentWindHeading"] = _CurrentWindHeading;
            DebugFloatDict["_CurrentWindSpeed"] = _CurrentWindSpeed;
            //Flight Automatics
            DebugFloatDict["_APTargetHeading"] = _APTargetHeading;
            DebugFloatDict["_APTargetAltitude"] = _APTargetAltitude;
            DebugFloatDict["_APTargetPitchAngle"] = _APTargetPitchAngle;
            DebugFloatDict["_APTargetVerticalSpeed"] = _APTargetVerticalSpeed;
            DebugFloatDict["_APTargetYokePitchPosition"] = _APTargetYokePitchPosition;
            DebugFloatDict["_ATTargetSpeed"] = _ATTargetSpeed;
            DebugFloatDict["_ATTargetThrust"] = _ATTargetThrust;
            DebugFloatDict["_ATTargetThrustPercentage"] = _ATTargetThrustPercentage;
            DebugFloatDict["_ATTargetThrottlePosition"] = _ATTargetThrottlePosition;
            //Flight Control Input
            DebugFloatDict["_HIDAirbrakeInput"] = _HIDAirbrakeInput;
            DebugFloatDict["_HIDPitchInput"] = _HIDPitchInput;
            DebugFloatDict["_HIDRollInput"] = _HIDRollInput;
            DebugFloatDict["_HIDThrottleInput"] = _HIDThrottleInput;
            DebugFloatDict["_HIDYawInput"] = _HIDYawInput;
            DebugFloatDict["_ATThrottleInput"] = _ATThrottleInput;
            DebugFloatDict["_APAirbrakeInput"] = _APAirbrakeInput;
            DebugFloatDict["_APPitchInput"] = _APPitchInput;
            DebugFloatDict["_APRollInput"] = _APRollInput;
            DebugFloatDict["_APYawInput"] = _APYawInput;
            DebugFloatDict["_LeverAirbrakeSetting"] = _LeverAirbrakeSetting;
            DebugFloatDict["_LeverThrottleSetting"] = _LeverThrottleSetting;
            DebugFloatDict["_PedalRudderSetting"] = _PedalRudderSetting;
            DebugFloatDict["_YokePitchSetting"] = _YokePitchSetting;
            DebugFloatDict["_YokeRollSetting"] = _YokeRollSetting;
        }
        public void DefineDebugDictionaryBool()
        {
            DebugBoolDict["_StateCrashed"] = _StateCrashed;
            DebugBoolDict["_StateFlying"] = _StateFlying;
            DebugBoolDict["_StateGrounded"] = _StateGrounded;
            DebugBoolDict["_StateLanding"] = _StateLanding;
            DebugBoolDict["_StateParked"] = _StateParked;
            DebugBoolDict["_StateStationary"] = _StateStationary;
            DebugBoolDict["_StateStalled"] = _StateStalled;
            DebugBoolDict["_StateTakeoff"] = _StateTakeoff;
            DebugBoolDict["_MasterEnginesOn"] = _MasterEnginesOn;
            DebugBoolDict["_TogaMode"] = _TogaMode;
            DebugBoolDict["_FuelTankDepleted"] = _FuelTankDepleted;
            DebugBoolDict["_FuelTankFull"] = _FuelTankFull;
            DebugBoolDict["_LandingGearExtended"] = _LandingGearExtended;
            DebugBoolDict["_AircraftInsideCloud"] = _AircraftInsideCloud;
            DebugBoolDict["_AircraftInsidePrecipitationArea"] = _AircraftInsidePrecipitationArea;
            DebugBoolDict["_AircraftInsideWeatherZone"] = _AircraftInsideWeatherZone;
            DebugBoolDict["_APOnline"] = _APOnline;
            DebugBoolDict["_ATOnline"] = _ATOnline;
            DebugBoolDict["_ALOnline"] = _ALOnline;
            DebugBoolDict["_HIDFlapsInput"] = _HIDFlapsInput;
            DebugBoolDict["_HIDLandingGearInput"] = _HIDLandingGearInput;
            DebugBoolDict["_HIDTogaInput"] = _HIDTogaInput;
            DebugBoolDict["_ATTogaInput"] = _ATTogaInput;
            DebugBoolDict["_LeverFlapsSetting"] = _LeverFlapsSetting;
            DebugBoolDict["_SwitchLandingGearSetting"] = _SwitchLandingGearSetting;
            DebugBoolDict["_SwitchTogaSetting"] = _SwitchTogaSetting;
            DebugBoolDict["_DetectedThrottleInput"] = _DetectedThrottleInput;
            DebugBoolDict["_DetectedPitchInput"] = _DetectedPitchInput;
            DebugBoolDict["_DetectedRollInput"] = _DetectedRollInput;
            DebugBoolDict["_DetectedYawInput"] = _DetectedYawInput;
        }
        public void DefineDebugDictionaryVector()
        {
            DebugVectorDict["_LiftDirection"] = _LiftDirection;
            DebugVectorDict["_Forces"] = _Forces;
            DebugVectorDict["_Torque"] = _Torque;
            DebugVectorDict["_ATTargetVelocity"] = _ATTargetVelocity;
            DebugVectorDict["_APTargetVerticalVelocity"] = _APTargetVerticalVelocity;
            DebugVectorDict["_ATTargetForce"] = _ATTargetForce;
        }
        public void DefineDebugDictionaryString() //Warning Lights Use This one
        {
            //Auto Flight Systems
            DebugStringDict["_APMode"] = _APMode.ToString();
            DebugStringDict["_ATMode"] = _ATMode.ToString();
            DebugStringDict["_ALMode"] = _ALMode.ToString();

            //Flight State Outputs
            DebugStringDict["_MasterCautionState"] = _CWPMasterCautionState.ToString();
            DebugStringDict["_MasterWarningState"] = _CWPMasterWarningState.ToString();
            DebugStringDict["_PitchState"] = _PitchAngleState.ToString();
            DebugStringDict["_RollState"] = _RollAngleState.ToString();
            DebugStringDict["_SpeedState"] = _SpeedState.ToString();
            DebugStringDict["_VerticalSpeedState"] = _VerticalSpeedState.ToString();
            DebugStringDict["_AltitudeState"] = _AltitudeState.ToString();
            DebugStringDict["_StallState"] = _StallState.ToString();
            DebugStringDict["_StateGrounded"] = _StateGrounded.ToString();

            //Flight System States
            DebugStringDict["_LandingGearState"] = _LandingGearState.ToString();
            DebugStringDict["_WheelBrakeState"] = _WheelBrakeState.ToString();
            DebugStringDict["_WheelTireState"] = _WheelTireState.ToString();
            DebugStringDict["_BatteryState"] = _BatteryState.ToString();
            DebugStringDict["_ElectricityState"] = _ElectricityState.ToString();

        }
        #endregion
    }
}
